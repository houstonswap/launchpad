address HoustonLaunchPad {

module whitelist_ticket {
    use aptos_framework::account;
    use std::signer;
    use std::vector;
    use std::comparator;
    use std::option::{Self, Option};
    use aptos_framework::event::{Self, EventHandle};
    use HoustonUtils::merkle_proof;
    use HoustonLaunchPad::ido;
    
    
    struct BoxOffice<phantom LaunchT> has key {
        ticket_infos: vector<TicketInfo>,
        add_info_events: EventHandle<AddInfoEvent<LaunchT>>,
        mod_info_events: EventHandle<ModifyInfoEvent<LaunchT>>,
    }

    struct SubscribeCapabilityStore<phantom LaunchT> has key {
        launch_pad_subscription_cap: ido::SubscribeCapability<LaunchT>
    }

    struct TicketInfo has store {
        merkle_root: vector<u8>, 
        amount: u64 //amount per ticket 
    }


    //
    // Events
    //

    struct AddInfoEvent<phantom LaunchT> has store, drop {
        amount: u64,
        merkle_root: vector<u8>,
    }

    struct ModifyInfoEvent<phantom LaunchT> has store, drop {
        old_amount: u64,
        amount: u64,
        old_merkle_root: vector<u8>,
        merkle_root: vector<u8>,
    }

    //
    // Constants
    //

    const ERROR_NOT_ADMIN: u64 = 1;
    const ERROR_DUPLICATE_INFO: u64 = 2;
    const ERROR_NO_BOX_OFFICE: u64 = 3;
    const ERROR_NO_TICKET_INFO: u64 = 4;
    const ERROR_MOD_INFO: u64 = 5;
    const ERROR_NOT_WHITELIST: u64 = 6;
    const ERROR_MERKLE_LENGTH: u64 = 7;
    const ERROR_NO_CAP: u64 = 8;
    const ERROR_MAX_AMT: u64 = 9;
    const ERROR_IDO_STARTED: u64 = 10;
    const ERROR_MERKLE_ARR_LENGTH: u64 = 11;
    
    const EQUAL: u8 = 0;
    const LESS_THAN: u8 = 1;
    const GREATER_THAN: u8 = 2;

    
    fun assert_admin(account: &signer) {
        assert!(signer::address_of(account) == @HoustonLaunchPad, ERROR_NOT_ADMIN);
    }

    /// create whitelist ticket info for IDO. 
    /// @params admin 
    /// @params amount_per_ticket how much each address is entitled for IDO
    /// @params merkle root generated by whitelisted address  
    entry fun create_ticket_info<LaunchT>(admin: &signer, amount_per_ticket: u64, merkle_root: vector<u8>) acquires BoxOffice {
        // 1. Check admin
        assert_admin(admin);
        // 2. Check root length
        assert!(vector::length(&merkle_root) > 0, ERROR_MERKLE_LENGTH);
        // 3. Check box office
        if(!exists<BoxOffice<LaunchT>>(@HoustonLaunchPad)) {
            move_to(admin, BoxOffice<LaunchT>{
                ticket_infos: vector::empty<TicketInfo>(),
                add_info_events: account::new_event_handle<AddInfoEvent<LaunchT>>(admin),
                mod_info_events: account::new_event_handle<ModifyInfoEvent<LaunchT>>(admin),
            })
        };

        let box_office = borrow_global_mut<BoxOffice<LaunchT>>(@HoustonLaunchPad);
        let maybe_info = get_info_by_merkle_root(&mut box_office.ticket_infos, merkle_root);
        // 4. check no duplicate on merkle root
        assert!(option::is_none<TicketInfo>(&maybe_info), ERROR_DUPLICATE_INFO);
        option::destroy_none(maybe_info);
        // 5. add ticket info with merkle root
        vector::push_back<TicketInfo>(
            &mut box_office.ticket_infos, 
            TicketInfo{ 
                merkle_root,
                amount: amount_per_ticket
            }
        );
        // 6. request cap from ido
        if(!exists<SubscribeCapabilityStore<LaunchT>>(@HoustonLaunchPad)) {
            move_to(admin, SubscribeCapabilityStore<LaunchT>{
                launch_pad_subscription_cap: ido::request_cap<LaunchT>(admin)
            });
        };
        
        // 7. create ticket info event
        event::emit_event<AddInfoEvent<LaunchT>>(
            &mut box_office.add_info_events,
            AddInfoEvent<LaunchT> {
                merkle_root, 
                amount: amount_per_ticket
            }
        );
    }
    
    /// modify max_subscribed_amount in ticket info. only allow if ido has not started. This will change the idx of ticket info
    /// @params admin 
    /// @params merkle_root to identify the ticket info  
    /// @params amount_per_ticket new amount 
    entry fun mod_ticket_info_amount<LaunchT> (admin: &signer, merkle_root: vector<u8>, amount_per_ticket: u64) acquires BoxOffice {
        // 1. Check admin
        assert_admin(admin);
        // 2. Check IDO not started
        assert!(!ido::is_ido_started<LaunchT>(), ERROR_IDO_STARTED);
        // 3. Check box office
        assert!(exists<BoxOffice<LaunchT>>(@HoustonLaunchPad), ERROR_NO_BOX_OFFICE);
        let box_office = borrow_global_mut<BoxOffice<LaunchT>>(@HoustonLaunchPad);

        // 4. Check ticket info exists and take out ticket_info from box office
        let maybe_info = get_info_by_merkle_root(&mut box_office.ticket_infos, merkle_root);
        assert!(option::is_some<TicketInfo>(&maybe_info), ERROR_NO_TICKET_INFO);

        let TicketInfo{amount: old_amount, merkle_root: _} = option::destroy_some(maybe_info);
        // 5. put new info back to box office 
        assert!(old_amount != amount_per_ticket, ERROR_MOD_INFO);
        vector::push_back<TicketInfo>(
            &mut box_office.ticket_infos, 
            TicketInfo{ 
                merkle_root,
                amount: amount_per_ticket
            }
        );
        
        // 6. fire modify info event
        event::emit_event<ModifyInfoEvent<LaunchT>>(
            &mut box_office.mod_info_events,
            ModifyInfoEvent<LaunchT> {
                old_amount,
                amount: amount_per_ticket,
                old_merkle_root: merkle_root,
                merkle_root,
            }
        );
    }

    /// modify merklet root in ticket info. only allow if ido has not started. This will change the idx of ticket info
    /// @params admin 
    /// @params old_merkle_root to identify the ticket info  
    /// @params new_merkle_root to change
    entry fun mod_ticket_info_root<LaunchT> (admin: &signer, old_merkle_root: vector<u8>, new_merkle_root: vector<u8>) acquires BoxOffice {
        // 1. Check admin
        assert_admin(admin);
        // 2. Check ido started
        assert!(!ido::is_ido_started<LaunchT>(), ERROR_IDO_STARTED);
        // 3. Check new merkle root length
        assert!(vector::length(&new_merkle_root) > 0, ERROR_MERKLE_LENGTH);
        assert!(!comparator::is_equal(&comparator::compare_u8_vector(old_merkle_root, new_merkle_root)), ERROR_MOD_INFO);
        // 4. Check old merkle root ticket info exists and remove from box office
        assert!(exists<BoxOffice<LaunchT>>(@HoustonLaunchPad), ERROR_NO_BOX_OFFICE);
        let box_office = borrow_global_mut<BoxOffice<LaunchT>>(@HoustonLaunchPad);
        let maybe_info = get_info_by_merkle_root(&mut box_office.ticket_infos, old_merkle_root);
        assert!(option::is_some<TicketInfo>(&maybe_info), ERROR_NO_TICKET_INFO);
        // 5. Check new merkle root ticket info not exists
        let maybe_info_new = get_info_by_merkle_root(&mut box_office.ticket_infos, new_merkle_root);
        assert!(option::is_none<TicketInfo>(&maybe_info_new), ERROR_DUPLICATE_INFO);
        option::destroy_none<TicketInfo>(maybe_info_new);
        
        let TicketInfo{amount, merkle_root: _ } = option::destroy_some(maybe_info);
        // 6. add new info with new merkle root
        vector::push_back<TicketInfo>(
            &mut box_office.ticket_infos, 
            TicketInfo{ 
                merkle_root: new_merkle_root,
                amount
            }
        );
        
        // 7. emit event
        event::emit_event<ModifyInfoEvent<LaunchT>>(
            &mut box_office.mod_info_events,
            ModifyInfoEvent<LaunchT> {
                old_amount: amount,
                amount,
                old_merkle_root,
                merkle_root: new_merkle_root,
            }
        );
    }
    
    /// pop out a ticket info or nothing by matching merkle root
    ///@params infos vector of TicketInfo
    ///@params root the merket root of the info
    fun get_info_by_merkle_root(infos: &mut vector<TicketInfo>, root: vector<u8>) : Option<TicketInfo> {
        let length = vector::length(infos);
        if (length == 0) {
            return option::none()
        };
        
        let idx = 0;
        while (idx < vector::length(infos)) {
            let potential = vector::borrow(infos, idx);
            if (comparator::is_equal(&comparator::compare_u8_vector(root, *&potential.merkle_root))) {
                return option::some(vector::swap_remove(infos, idx))
            };
            idx = idx + 1;
        };
        
        option::none()
    } 
    
    /// get the amount for an address if the address and the proofs match with merkle root
    /// @params account 
    /// @params proofs merkle proofs for the account to match with the merkle root of an array
    fun get_amount_for_signer_single<LaunchT>(account: &signer, proofs: vector<vector<u8>>, idx: u64): u64 acquires BoxOffice {
        // 1. Check merkle proof length
        assert!(vector::length(&proofs) > 0, ERROR_MERKLE_LENGTH);
        // 1.1. Check box office
        assert!(exists<BoxOffice<LaunchT>>(@HoustonLaunchPad), ERROR_NO_BOX_OFFICE);
        let box_office = borrow_global<BoxOffice<LaunchT>>(@HoustonLaunchPad);
        let info = vector::borrow(&box_office.ticket_infos, idx);
        // 1.2 Check if account is in the whitelist
        assert!(merkle_proof::verify(signer::address_of(account), proofs, *&info.merkle_root), ERROR_NOT_WHITELIST);
        info.amount
    }
    
    /// get the amount for an address if the address and the proofs match with multiple merkle roots
    /// @params account 
    /// @params proofs merkle proofs for the account to match with multiple merkle roots of an array
    fun get_amount_for_signer_multiple<LaunchT>(account: &signer, proofs_arr: vector<vector<vector<u8>>>, idx_arr: vector<u64>): u64 acquires BoxOffice {
        let amount: u64 = 0;
        let duplicates = vector::empty<u64>();
        
        // 1. check merkle proof length
        assert!(vector::length(&idx_arr) == vector::length(&proofs_arr), ERROR_MERKLE_ARR_LENGTH);
        // 1.1. Check box office
        assert!(exists<BoxOffice<LaunchT>>(@HoustonLaunchPad), ERROR_NO_BOX_OFFICE);
        // 2. loop the idx array to check for the proofs 1 by 1
        while(vector::length(&idx_arr) > 0) {
            let idx = vector::pop_back(&mut idx_arr);
            // no idx duplicates
            assert!(!vector::contains(&duplicates, &idx), ERROR_DUPLICATE_INFO);
            vector::push_back(&mut duplicates, idx);
            amount = amount + get_amount_for_signer_single<LaunchT>(account, vector::pop_back(&mut proofs_arr), idx);    
        };

        amount
    }
    
    /// deposit to ido through this entry
    /// @params account 
    /// @params proofs merkle proofs for the account to match with multiple/single merkle roots of an array
    entry fun deposit_ido<PaymentT, LaunchT>(account: &signer, amount: u64, proofs_arr: vector<vector<vector<u8>>>, idx_arr: vector<u64>) acquires BoxOffice, SubscribeCapabilityStore {
        // 1. check if cap exists
        assert!(exists<SubscribeCapabilityStore<LaunchT>>(@HoustonLaunchPad), ERROR_NO_CAP);
        // 2. max subcription amount = max from whitelists
        let max = get_amount_for_signer_multiple<LaunchT>(account, proofs_arr, idx_arr);
        let cap = &borrow_global<SubscribeCapabilityStore<LaunchT>>(@HoustonLaunchPad).launch_pad_subscription_cap;
        // 3. deposit to ido and check max amount
        assert!(max >= ido::deposit_with_cap<PaymentT, LaunchT>(account, amount, cap), ERROR_MAX_AMT);
    }






    
    /***
    *    .___________. _______     _______.___________.
    *    |           ||   ____|   /       |           |
    *    `---|  |----`|  |__     |   (----`---|  |----`
    *        |  |     |   __|     \   \       |  |     
    *        |  |     |  |____.----)   |      |  |     
    *        |__|     |_______|_______/       |__|     
    *                                                  
    */



    #[test_only]
    use HoustonDevTools::dev::{Self, ETH, USDT};
    #[test_only]
    use aptos_framework::coin;
    #[test_only]
    use aptos_framework::timestamp;

        
    #[test(admin=@HoustonLaunchPad)]
    fun test_create_ticket_info(admin: &signer) acquires BoxOffice {
        let addr = signer::address_of(admin);
        
        // 0. setup and create ticket info
        dev::setup();
        dev::create_account_for_test(admin);
        dev::initialize_coins(admin);
        dev::register_coins(admin);
        let amount = 1000000000000; //10000E8
        coin::deposit<ETH>(addr, dev::mint_for_test<ETH>(admin, 1000000000));
        ido::create_launch_for_test_usdt_eth(admin);
        create_ticket_info<ETH>(admin, amount, merkle_proof::get_root());
        assert!(exists<BoxOffice<ETH>>(addr), 0);
        assert!(exists<SubscribeCapabilityStore<ETH>>(addr), 0);
        let box_office = borrow_global<BoxOffice<ETH>>(addr);
        let infos = &box_office.ticket_infos;
        assert!(vector::length(infos) == 1, 0);
        let info = vector::borrow(infos, 0);
        assert!(comparator::is_equal(&comparator::compare_u8_vector(info.merkle_root, merkle_proof::get_root())), 0);
        assert!(info.amount == amount, 0);    
    }

    #[test(admin=@HoustonLaunchPad)]
    fun test_create_ticket_infos(admin: &signer) acquires BoxOffice {
        let addr = signer::address_of(admin);
        
        // 0. setup and create ticket info
        dev::setup();
        dev::create_account_for_test(admin);
        dev::initialize_coins(admin);
        dev::register_coins(admin);
        let amount = 1000000000000; //10000E8
        coin::deposit<ETH>(addr, dev::mint_for_test<ETH>(admin, 1000000000));
        ido::create_launch_for_test_usdt_eth(admin);
        create_ticket_info<ETH>(admin, amount, merkle_proof::get_root());
        let new_root = merkle_proof::get_root();
        vector::push_back(&mut new_root, 1);
        create_ticket_info<ETH>(admin, amount * 2, new_root);
        
        assert!(exists<BoxOffice<ETH>>(addr), 0);
        assert!(exists<SubscribeCapabilityStore<ETH>>(addr), 0);
        let box_office = borrow_global<BoxOffice<ETH>>(addr);
        let infos = &box_office.ticket_infos;
        assert!(vector::length(infos) == 2, 0);
        let info = vector::borrow(infos, 0);
        assert!(comparator::is_equal(&comparator::compare_u8_vector(info.merkle_root, merkle_proof::get_root())), 0);
        assert!(info.amount == amount, 0);   

         let box_office = borrow_global_mut<BoxOffice<ETH>>(addr);
        let infos = &mut box_office.ticket_infos;
        let maybe_info2 = get_info_by_merkle_root(infos, new_root);
        assert!(option::is_some(&maybe_info2), 0);
        let info_2 = option::destroy_some<TicketInfo>(maybe_info2);
        assert!(info_2.amount == amount * 2, 0);
        TicketInfo{merkle_root: _, amount: _} = info_2;
        
    }

    #[test(admin=@HoustonLaunchPad, alice=@0xA11CE)]
    #[expected_failure(abort_code = 1, location = Self)]
    fun test_create_ticket_info_fail_not_admin(admin: &signer, alice: &signer) acquires BoxOffice {
        let addr = signer::address_of(admin);
        
        // 0. setup and create ticket info
        dev::setup();
        dev::create_account_for_test(admin);
        dev::initialize_coins(admin);
        dev::register_coins(admin);
        let amount = 1000000000000; //10000E8
        coin::deposit<ETH>(addr, dev::mint_for_test<ETH>(admin, 1000000000));
        ido::create_launch_for_test_usdt_eth(admin);
        create_ticket_info<ETH>(alice, amount, merkle_proof::get_root());
    }

    #[test(admin=@HoustonLaunchPad)]
    #[expected_failure(abort_code = 2, location = ido)]
    fun test_create_ticket_info_fail_not_launched(admin: &signer) acquires BoxOffice {
        dev::setup();
        dev::create_account_for_test(admin);
        dev::initialize_coins(admin);
        
        let amount = 1000000000000; //10000E8
        create_ticket_info<ETH>(admin, amount, merkle_proof::get_root());
    }

    #[test(admin=@HoustonLaunchPad)]
    #[expected_failure(abort_code = 2, location = Self)]
    fun test_create_ticket_info_duplicate_root(admin: &signer) acquires BoxOffice {
        let addr = signer::address_of(admin);
        
        // 0. setup and create ticket info
        dev::setup();
        dev::create_account_for_test(admin);
        dev::initialize_coins(admin);
        dev::register_coins(admin);
        let amount = 1000000000000; //10000E8
        coin::deposit<ETH>(addr, dev::mint_for_test<ETH>(admin, 1000000000));
        ido::create_launch_for_test_usdt_eth(admin);
        
        create_ticket_info<ETH>(admin, amount, merkle_proof::get_root());
        create_ticket_info<ETH>(admin, amount + 10, merkle_proof::get_root());
    }

    #[test(admin=@HoustonLaunchPad)]
    #[expected_failure(abort_code = 7, location = Self)]
    fun test_create_ticket_info_empty_root(admin: &signer) acquires BoxOffice {
        let addr = signer::address_of(admin);
        
        // 0. setup and create ticket info
        dev::setup();
        dev::create_account_for_test(admin);
        dev::initialize_coins(admin);
        dev::register_coins(admin);
        let amount = 1000000000000; //10000E8
        coin::deposit<ETH>(addr, dev::mint_for_test<ETH>(admin, 1000000000));
        ido::create_launch_for_test_usdt_eth(admin);
        
        create_ticket_info<ETH>(admin, amount, vector::empty<u8>());
        
    }

    #[test(admin=@HoustonLaunchPad)]
    fun test_mod_ticket_info_amount(admin: &signer) acquires BoxOffice {
        let addr = signer::address_of(admin);
        
        // 0. setup and create ticket info
        dev::setup();
        dev::create_account_for_test(admin);
        dev::initialize_coins(admin);
        dev::register_coins(admin);
        let amount = 1000000000000; //10000E8
        coin::deposit<ETH>(addr, dev::mint_for_test<ETH>(admin, 1000000000));
        ido::create_launch_for_test_usdt_eth(admin);
        create_ticket_info<ETH>(admin, amount, merkle_proof::get_root());
        mod_ticket_info_amount<ETH>(admin, merkle_proof::get_root(), amount - 100);
        
        
        assert!(exists<BoxOffice<ETH>>(addr), 0);
        assert!(exists<SubscribeCapabilityStore<ETH>>(addr), 0);
        let box_office = borrow_global<BoxOffice<ETH>>(addr);
        let infos = &box_office.ticket_infos;
        assert!(vector::length(infos) == 1, 0);
        let info = vector::borrow(infos, 0);
        assert!(comparator::is_equal(&comparator::compare_u8_vector(info.merkle_root, merkle_proof::get_root())), 0);
        assert!(info.amount == amount - 100, 0);    
    }

    #[test(admin=@HoustonLaunchPad)]
    #[expected_failure(abort_code = 10, location = Self)]
    fun test_mod_ticket_info_amount_fail_ido_started(admin: &signer) acquires BoxOffice {
        let addr = signer::address_of(admin);
        
        // 0. setup and create ticket info
        dev::setup();
        dev::create_account_for_test(admin);
        dev::initialize_coins(admin);
        dev::register_coins(admin);
        let amount = 1000000000000; //10000E8
        coin::deposit<ETH>(addr, dev::mint_for_test<ETH>(admin, 1000000000));
        ido::create_launch_for_test_usdt_eth(admin);
        create_ticket_info<ETH>(admin, amount, merkle_proof::get_root());
        timestamp::fast_forward_seconds(10000);
        mod_ticket_info_amount<ETH>(admin, merkle_proof::get_root(), amount - 100);
 
    }

    #[test(admin=@HoustonLaunchPad)]
    #[expected_failure(abort_code = 5, location = Self)]
    fun test_mod_ticket_info_amount_fail_same_amt(admin: &signer) acquires BoxOffice {
        let addr = signer::address_of(admin);
        
        // 0. setup and create ticket info
        dev::setup();
        dev::create_account_for_test(admin);
        dev::initialize_coins(admin);
        dev::register_coins(admin);
        let amount = 1000000000000; //10000E8
        coin::deposit<ETH>(addr, dev::mint_for_test<ETH>(admin, 1000000000));
        ido::create_launch_for_test_usdt_eth(admin);
        create_ticket_info<ETH>(admin, amount, merkle_proof::get_root());
        mod_ticket_info_amount<ETH>(admin, merkle_proof::get_root(), amount);
 
    }
    #[test(admin=@HoustonLaunchPad)]
    #[expected_failure(abort_code = 3, location = Self)]
    fun test_mod_ticket_info_amount_fail_no_box_office(admin: &signer) acquires BoxOffice {
        let addr = signer::address_of(admin);
        
        // 0. setup and create ticket info
        dev::setup();
        dev::create_account_for_test(admin);
        dev::initialize_coins(admin);
        dev::register_coins(admin);
        let amount = 1000000000000; //10000E8
        coin::deposit<ETH>(addr, dev::mint_for_test<ETH>(admin, 1000000000));
        ido::create_launch_for_test_usdt_eth(admin);
        // create_ticket_info<ETH>(admin, amount, merkle_proof::get_root());
        mod_ticket_info_amount<ETH>(admin, merkle_proof::get_root(), amount);
 
    }

    #[test(admin=@HoustonLaunchPad)]
    #[expected_failure(abort_code = 4, location = Self)]
    fun test_mod_ticket_info_amount_fail_no_info(admin: &signer) acquires BoxOffice {
        let addr = signer::address_of(admin);
        
        // 0. setup and create ticket info
        dev::setup();
        dev::create_account_for_test(admin);
        dev::initialize_coins(admin);
        dev::register_coins(admin);
        let amount = 1000000000000; //10000E8
        coin::deposit<ETH>(addr, dev::mint_for_test<ETH>(admin, 1000000000));
        ido::create_launch_for_test_usdt_eth(admin);
        create_ticket_info<ETH>(admin, amount, merkle_proof::get_root());
        mod_ticket_info_amount<ETH>(admin, vector::empty<u8>(), amount);
    }

    #[test(admin=@HoustonLaunchPad)]
    fun test_mod_ticket_info_root(admin: &signer) acquires BoxOffice {
        let addr = signer::address_of(admin);
        
        // 0. setup and create ticket info
        dev::setup();
        dev::create_account_for_test(admin);
        dev::initialize_coins(admin);
        dev::register_coins(admin);
        let amount = 1000000000000; //10000E8
        coin::deposit<ETH>(addr, dev::mint_for_test<ETH>(admin, 1000000000));
        ido::create_launch_for_test_usdt_eth(admin);
        create_ticket_info<ETH>(admin, amount, merkle_proof::get_root());
        let new_root = merkle_proof::get_root();
        vector::push_back(&mut new_root, 1);
        mod_ticket_info_root<ETH>(admin, merkle_proof::get_root(), new_root);
        
        
        assert!(exists<BoxOffice<ETH>>(addr), 0);
        assert!(exists<SubscribeCapabilityStore<ETH>>(addr), 0);
        let box_office = borrow_global<BoxOffice<ETH>>(addr);
        let infos = &box_office.ticket_infos;
        assert!(vector::length(infos) == 1, 0);
        let info = vector::borrow(infos, 0);
        assert!(info.amount == amount, 0);    
    }

    #[test(admin=@HoustonLaunchPad)]
    #[expected_failure(abort_code = 10, location = Self)]
    fun test_mod_ticket_info_root_fail_ido_started(admin: &signer) acquires BoxOffice {
        let addr = signer::address_of(admin);
        
        // 0. setup and create ticket info
        dev::setup();
        dev::create_account_for_test(admin);
        dev::initialize_coins(admin);
        dev::register_coins(admin);
        let amount = 1000000000000; //10000E8
        coin::deposit<ETH>(addr, dev::mint_for_test<ETH>(admin, 1000000000));
        ido::create_launch_for_test_usdt_eth(admin);
        create_ticket_info<ETH>(admin, amount, merkle_proof::get_root());
        timestamp::fast_forward_seconds(10000);
        let new_root = merkle_proof::get_root();
        vector::push_back(&mut new_root, 1);
        mod_ticket_info_root<ETH>(admin, merkle_proof::get_root(), new_root);
 
    }

    
    #[test(admin=@HoustonLaunchPad)]
    #[expected_failure(abort_code = 3, location = Self)]
    fun test_mod_ticket_info_root_fail_no_box_office(admin: &signer) acquires BoxOffice {
        let addr = signer::address_of(admin);
        
        // 0. setup and create ticket info
        dev::setup();
        dev::create_account_for_test(admin);
        dev::initialize_coins(admin);
        dev::register_coins(admin);
        coin::deposit<ETH>(addr, dev::mint_for_test<ETH>(admin, 1000000000));
        ido::create_launch_for_test_usdt_eth(admin);
        let new_root = merkle_proof::get_root();
        vector::push_back(&mut new_root, 1);
        mod_ticket_info_root<ETH>(admin, merkle_proof::get_root(), new_root);
 
    }

    #[test(admin=@HoustonLaunchPad)]
    #[expected_failure(abort_code = 4, location = Self)]
    fun test_mod_ticket_info_root_fail_no_info(admin: &signer) acquires BoxOffice {
        let addr = signer::address_of(admin);
        
        // 0. setup and create ticket info
        dev::setup();
        dev::create_account_for_test(admin);
        dev::initialize_coins(admin);
        dev::register_coins(admin);
        let amount = 1000000000000; //10000E8
        coin::deposit<ETH>(addr, dev::mint_for_test<ETH>(admin, 1000000000));
        ido::create_launch_for_test_usdt_eth(admin);
        create_ticket_info<ETH>(admin, amount, merkle_proof::get_root());
        let new_root = merkle_proof::get_root();
        vector::push_back(&mut new_root, 1);
        mod_ticket_info_root<ETH>(admin, vector::empty<u8>(), new_root);
    }

    #[test(admin=@HoustonLaunchPad)]
    #[expected_failure(abort_code = 7, location = Self)]
    fun test_mod_ticket_info_root_fail_new_root_no_length(admin: &signer) acquires BoxOffice {
        let addr = signer::address_of(admin);
        
        // 0. setup and create ticket info
        dev::setup();
        dev::create_account_for_test(admin);
        dev::initialize_coins(admin);
        dev::register_coins(admin);
        let amount = 1000000000000; //10000E8
        coin::deposit<ETH>(addr, dev::mint_for_test<ETH>(admin, 1000000000));
        ido::create_launch_for_test_usdt_eth(admin);
        create_ticket_info<ETH>(admin, amount, merkle_proof::get_root());
        let new_root = vector::empty<u8>();
        mod_ticket_info_root<ETH>(admin, vector::empty<u8>(), new_root);
    }

    #[test]
    fun test_get_info_by_merkle_root(): vector<TicketInfo>{
        let root = merkle_proof::get_root();
        let root_2 = merkle_proof::get_root();
        vector::push_back(&mut root_2, 15);

        let tick1 = TicketInfo{merkle_root: root, amount: 1};
        let tick2 = TicketInfo{merkle_root: root_2, amount: 2};

        let infos = vector::empty<TicketInfo>();
        vector::push_back(&mut infos, tick1);
        vector::push_back(&mut infos, tick2);

        let maybe_info = get_info_by_merkle_root(&mut infos, root);
        assert!(option::is_some(&maybe_info), 0);
        assert!(vector::length(&infos) == 1, 0);
        let info = option::destroy_some(maybe_info);
        let TicketInfo{merkle_root: _, amount: _} = info;
        infos
    }




    #[test(alice=@0xA11CE, admin=@HoustonLaunchPad)]
    fun test_get_amount_for_signer_single(admin: &signer, alice: &signer) acquires BoxOffice {
        test_create_ticket_infos(admin);
        // let addr = signer::address_of(admin);
        let alice_addr = signer::address_of(alice);
        let proof = merkle_proof::correct_proofs(alice_addr);
        let amount = get_amount_for_signer_single<ETH>(alice, proof, 0);
        let office = borrow_global<BoxOffice<ETH>>(@HoustonLaunchPad);
        let infos = &office.ticket_infos;
        let info = vector::borrow(infos, 0);
        assert!(info.amount == amount, 0);

    }

    #[test(alice=@0xA11CE, admin=@HoustonLaunchPad)]
    #[expected_failure(abort_code = 7, location = Self)]
    fun test_get_amount_for_signer_single_fail_not_whitelist(admin: &signer, alice: &signer) acquires BoxOffice {
        test_create_ticket_infos(admin);
        let proof = vector::empty<vector<u8>>();
        get_amount_for_signer_single<ETH>(alice, proof, 0);
    }

    #[test(alice=@0xA11CE, admin=@HoustonLaunchPad)]
    #[expected_failure(abort_code = 6, location = Self)]
    fun test_get_amount_for_signer_single_fail_not_whitelist_2(admin: &signer, alice: &signer) acquires BoxOffice {
        test_create_ticket_infos(admin);
        let proof = merkle_proof::correct_proofs(@0xB0B);
        get_amount_for_signer_single<ETH>(alice, proof, 0);
    }

    #[test(alice=@0xA11CE, admin=@HoustonLaunchPad)]
    fun test_get_amount_for_signer_multiple(admin: &signer, alice: &signer) acquires BoxOffice {
        test_create_ticket_infos(admin);
        create_ticket_info<ETH>(admin, 10, merkle_proof::get_root_2());
        // let addr = signer::address_of(admin);
        let alice_addr = signer::address_of(alice);
        let proof = merkle_proof::correct_proofs(alice_addr);
        let proof2 = merkle_proof::correct_proofs_2(alice_addr);
        let proofs = vector::empty<vector<vector<u8>>>();
        vector::push_back(&mut proofs, proof);
        vector::push_back(&mut proofs, proof2);
        let amount = get_amount_for_signer_multiple<ETH>(alice, proofs, vector[0, 1]);
        let office = borrow_global<BoxOffice<ETH>>(@HoustonLaunchPad);
        let infos = &office.ticket_infos;
        let info = vector::borrow(infos, 0);
        let info2 = vector::borrow(infos, 1);
        assert!(info.amount + info2.amount == amount, 0);

    }

    #[test(alice=@0xA11CE, admin=@HoustonLaunchPad)]
    #[expected_failure(abort_code = 11, location = Self)]
    fun test_get_amount_for_signer_multiple_fail_length(admin: &signer, alice: &signer) acquires BoxOffice {
        test_create_ticket_infos(admin);
        create_ticket_info<ETH>(admin, 10, merkle_proof::get_root_2());
        // let addr = signer::address_of(admin);
        let alice_addr = signer::address_of(alice);
        let proof = merkle_proof::correct_proofs(alice_addr);
        let proof2 = merkle_proof::correct_proofs_2(alice_addr);
        let proofs = vector::empty<vector<vector<u8>>>();
        vector::push_back(&mut proofs, proof);
        vector::push_back(&mut proofs, proof2);
        get_amount_for_signer_multiple<ETH>(alice, proofs, vector[1]);
    }

    #[test(alice=@0xA11CE, admin=@HoustonLaunchPad)]
    #[expected_failure(abort_code = 2, location = Self)]
    fun test_get_amount_for_signer_multiple_fail_duplicate_arr(admin: &signer, alice: &signer) acquires BoxOffice {
        test_create_ticket_infos(admin);
        create_ticket_info<ETH>(admin, 10, merkle_proof::get_root_2());
        // let addr = signer::address_of(admin);
        let alice_addr = signer::address_of(alice);
        let proof = merkle_proof::correct_proofs(alice_addr);
        let proof2 = merkle_proof::correct_proofs_2(alice_addr);
        let proofs = vector::empty<vector<vector<u8>>>();
        vector::push_back(&mut proofs, proof);
        vector::push_back(&mut proofs, proof2);
        get_amount_for_signer_multiple<ETH>(alice, proofs, vector[1, 1]);
    }

    #[test(alice=@0xA11CE, admin=@HoustonLaunchPad)]
    fun test_deposit_ido(admin: &signer, alice: &signer) acquires BoxOffice, SubscribeCapabilityStore {
        test_create_ticket_infos(admin);
        
        let alice_addr = signer::address_of(alice);
        let proof = merkle_proof::correct_proofs(alice_addr);
        dev::create_account_for_test(alice);
        dev::register_coins(alice);
        coin::deposit<USDT>(alice_addr, dev::mint_for_test<USDT>(admin, 1000000000));
        timestamp::fast_forward_seconds(110);
        deposit_ido<USDT, ETH>(alice, 1000000, vector[proof], vector[0]);
        
    }

    #[test(alice=@0xA11CE, admin=@HoustonLaunchPad)]
    #[expected_failure(abort_code = 9, location = Self)]
    fun test_deposit_ido_fail_max_amt(admin: &signer, alice: &signer) acquires BoxOffice, SubscribeCapabilityStore {
        test_create_ticket_infos(admin);
        
        let alice_addr = signer::address_of(alice);
        let proof = merkle_proof::correct_proofs(alice_addr);
        let office = borrow_global<BoxOffice<ETH>>(@HoustonLaunchPad);
        let infos = &office.ticket_infos;
        let info = vector::borrow(infos, 0);
        let max = info.amount;
        dev::create_account_for_test(alice);
        dev::register_coins(alice);
        coin::deposit<USDT>(alice_addr, dev::mint_for_test<USDT>(admin, max + 1));
        timestamp::fast_forward_seconds(110);
        deposit_ido<USDT, ETH>(alice, max + 1, vector[proof], vector[0]);
        
    }

    #[test(alice=@0xA11CE, admin=@HoustonLaunchPad)]
    #[expected_failure(abort_code = 8, location = Self)]
    fun test_deposit_ido_single_fail_no_ido_cap(admin: &signer, alice: &signer) acquires BoxOffice, SubscribeCapabilityStore {
        dev::setup();
        dev::create_account_for_test(admin);
        dev::initialize_coins(admin);
        dev::register_coins(admin);
        
        let alice_addr = signer::address_of(alice);
        let proof = merkle_proof::correct_proofs(alice_addr);
        
        dev::create_account_for_test(alice);
        dev::register_coins(alice);
        coin::deposit<USDT>(alice_addr, dev::mint_for_test<USDT>(admin, 1));
        timestamp::fast_forward_seconds(110);
        deposit_ido<USDT, ETH>(alice, 1, vector[proof], vector[0]);
    }

    #[test(alice=@0xA11CE, admin=@HoustonLaunchPad)]
    fun test_deposit_ido_multiple(admin: &signer, alice: &signer) acquires BoxOffice, SubscribeCapabilityStore {
        test_create_ticket_infos(admin);
        create_ticket_info<ETH>(admin, 10, merkle_proof::get_root_2());
        // let addr = signer::address_of(admin);
        let alice_addr = signer::address_of(alice);
        let proof = merkle_proof::correct_proofs(alice_addr);
        let proof2 = merkle_proof::correct_proofs_2(alice_addr);
        let proofs = vector::empty<vector<vector<u8>>>();
        vector::push_back(&mut proofs, proof);
        vector::push_back(&mut proofs, proof2);
        
        let office = borrow_global<BoxOffice<ETH>>(@HoustonLaunchPad);
        let infos = &office.ticket_infos;
        let info = vector::borrow(infos, 0);
        let info2 = vector::borrow(infos, 1);
        // assert!(info.amount + info2.amount == amount, 0);

        dev::create_account_for_test(alice);
        dev::register_coins(alice);
        coin::deposit<USDT>(alice_addr, dev::mint_for_test<USDT>(admin, info.amount + info2.amount));
        timestamp::fast_forward_seconds(110);
        deposit_ido<USDT, ETH>(alice, info.amount + info2.amount, proofs, vector[0, 1]);
    }

    


    



        

    

}
    
}